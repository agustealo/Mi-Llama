# Mi-Llama: MindsDB and Ollama Chat Application with Streamlit UI

This repository contains an application that integrates MindsDB and Ollama with a Streamlit user interface. The application provides a chat interface where users can interact with a locally hosted language model.

## Table of Contents

1. [Setup](#setup)
    - [Environment Variables](#environment-variables)
    - [Setting Up MindsDB](#setting-up-mindsdb)
    - [Running the Streamlit Application](#running-the-streamlit-application)
2. [Basic Use](#basic-use)
    - [Starting the Application](#starting-the-application)
    - [Using the Sidebar](#using-the-sidebar)
    - [Interacting with the Chat](#interacting-with-the-chat)
3. [Advanced Use](#advanced-use)
    - [Customizing the MindsDB Model](#customizing-the-mindsdb-model)
    - [Customizing the Ollama Model](#customizing-the-ollama-model)
    - [Session State Management](#session-state-management)
4. [Troubleshooting](#troubleshooting)
    - [Common Errors and Solutions](#common-errors-and-solutions)
    - [Logs and Debugging](#logs-and-debugging)

## Setup

### Environment Variables

To configure the application, create a `.env` file in the root directory of your project. The `.env` file should contain the following environment variables:

```env
MINDSDB_HOST=127.0.0.1
MINDSDB_PORT=47334
MINDSDB_API_KEY=your_mindsdb_api_key_here

OLLAMA_HOST=127.0.0.1
OLLAMA_PORT=11434

# Optional: Database connection details (if applicable)
DB_HOST=localhost
DB_USER=your_database_username
DB_PASSWORD=your_database_password
DB_NAME=your_database_name
```

Replace the placeholders with your actual values.

### Setting Up MindsDB

Ensure you have MindsDB installed and running. Use the following Python script to set up MindsDB:

#### `setup_mindsdb.py`

```python
import requests
from dotenv import load_dotenv
import os

# Load environment variables from .env file
load_dotenv()

# Fetch environment variables
MINDSDB_API_URL = f"http://{os.getenv('MINDSDB_HOST')}:{os.getenv('MINDSDB_PORT')}/api/sql/query"
MINDSDB_API_KEY = os.getenv("MINDSDB_API_KEY")

def setup_mindsdb():
    # Define the queries to setup MindsDB engine and model
    engine_creation_query = """
    DROP MODEL IF EXISTS ollama_model;
    DROP ML_ENGINE IF EXISTS ollama_engine;

    CREATE ML_ENGINE ollama_engine
    FROM ollama;

    CREATE MODEL ollama_model
    PREDICT response
    USING
        engine = 'ollama_engine',
        model_name = 'llama3',
        prompt_template = 'respond to {{text}} by {{username}}',
        ollama_serve_url = 'http://host.docker.internal:11434';
    """

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {MINDSDB_API_KEY}"
    }

    data = {
        "query": engine_creation_query
    }

    try:
        response = requests.post(MINDSDB_API_URL, json=data, headers=headers)
        response.raise_for_status()  # Raise exception for non-200 status codes
        print("MindsDB setup completed successfully.")
    except requests.RequestException as e:
        print(f"An error occurred while setting up MindsDB: {e}")

if __name__ == "__main__":
    setup_mindsdb()
```

Run this script to set up MindsDB:
```sh
python setup_mindsdb.py
```

### Running the Streamlit Application

Ensure you have Streamlit installed. If not, install it using pip:
```sh
pip install streamlit
```

Then, run the Streamlit application:
```sh
streamlit run app.py
```

## Basic Use

### Starting the Application

1. Ensure that MindsDB and Ollama services are running.
2. Run the Streamlit application:
    ```sh
    streamlit run app.py
    ```

### Using the Sidebar

The sidebar allows you to configure the application settings:

1. **API Settings**: Configure the MindsDB and Ollama API settings.
2. **Username**: Enter a username to personalize interactions.
3. **Update Settings**: Click the "Update Settings" button to save changes and reinitialize the MindsDB setup.

### Interacting with the Chat

1. **Chat Input**: Type your message in the chat input field at the bottom.
2. **Chat History**: Previous messages and responses are displayed above the input field.
3. **Send Message**: Press Enter to send your message and receive a response from either MindsDB or Ollama.

## Advanced Use

### Customizing the MindsDB Model

To customize the MindsDB model, modify the SQL statements in `setup_mindsdb.py`. For example, you can change the `model_name` or `prompt_template` parameters.

### Customizing the Ollama Model

To customize the Ollama model, modify the `OLLAMA_API_URL` in `app.py`. You can also change the `model` and `prompt_template` used in the `send_message_to_ollama` function.

### Session State Management

Streamlit's session state allows you to persist data across reruns. This application uses session state to store:

- API settings
- Username
- Chat messages

To add new variables to the session state, initialize them at the start of `app.py` if they are not already present.

## Troubleshooting

### Common Errors and Solutions

#### Error: `AttributeError: st.session_state has no attribute "username". Did you forget to initialize it?`

**Cause**: Session state variables are not initialized.

**Solution**: Initialize session state variables at the start of `app.py` if they are not already present:
```python
if "username" not in st.session_state:
    st.session_state.username = "User"
```

#### Error: `requests.exceptions.RequestException: Error communicating with MindsDB`

**Cause**: There is an issue with the MindsDB API request.

**Solution**: Ensure that the MindsDB service is running and that the API URL and API key are correct. Check the network connection and retry.

#### Error: `Failed to setup MindsDB: CalledProcessError`

**Cause**: The MindsDB setup script failed.

**Solution**: Ensure that the `setup_mindsdb.py` script is correct and that MindsDB is running. Check the script output for more details.

### Logs and Debugging

To debug issues, add print statements or use `st.write()` to output variables and responses. For example:
```python
st.write("Debug info:", variable)
```

Check the console logs for additional error messages and stack traces that can help identify the issue.

---

By following this comprehensive guide, you should be able to set up, use, and troubleshoot the Streamlit application integrated with MindsDB and Ollama. For further customization, refer to the official documentation of MindsDB, Ollama, and Streamlit.